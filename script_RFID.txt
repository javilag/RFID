CREATE TABLE Persona (doc_id varchar(12) primary key, nombre varchar(80), genero varchar(10), correo varchar(80), tel varchar(7), cel varchar(10),
cod_tarjeta varchar(4) unique, cod_universidad varchar(12) unique);

CREATE TABLE Programa (codigo varchar(3) primary key, nombre varchar(80) unique, cant_semestre numeric);

CREATE TABLE Registro_En_Sa (codigo Serial, id_persona varchar(12) references persona(doc_id), fecha_hora varchar(25), tipo varchar(7), primary key (codigo, id_persona));

CREATE TABLE PersonaxPrograma (id_persona varchar (12) references persona(doc_id), 
cod_programa varchar(3) references programa(codigo), ultimo_semestre numeric, titulacion varchar(10), estado varchar(10), 
primary key (id_persona, cod_programa));

INSERT INTO persona VALUES ('1037638826', 'Juan Jose', 'Masculino', 'juanjo-805@hotmail.com', '3336213', '3046518850', '0001', '201217021010');
INSERT INTO persona VALUES ('1037638827', 'Carlos', 'Masculino', 'carlos@hotmail.com', '3346213', '3036518850', '0002', '201317021010');
INSERT INTO persona VALUES ('1037638828', 'Jorge', 'Masculino', 'jorge@hotmail.com', '3356213', '3036518850', '0003', '201327021010');
INSERT INTO persona VALUES ('1037638829', 'Omar', 'Masculino', 'omar@hotmail.com', '3366213', '3046518850', '0004', '201337021010');
INSERT INTO persona VALUES ('1037638830', 'Adriana', 'Femenino', 'adriana@hotmail.com', '3376213', '3056518850', '0005', '201347021010');

INSERT INTO programa VALUES ('001', 'Ingenieria de Sistemas', 9);
INSERT INTO programa VALUES ('002', 'Ingenieria Electronica', 10);
INSERT INTO programa VALUES ('003', 'Tecnologia de Sistemas', 6);

INSERT INTO personaxprograma VALUES ('1037638826', '001', 6, null, 'Activo');
INSERT INTO personaxprograma VALUES ('1037638827', '001', 7, null, 'Activo');
INSERT INTO personaxprograma VALUES ('1037638828', '002', 10, 'Graduado', 'Egresado');
INSERT INTO personaxprograma VALUES ('1037638829', '003', 3, null, 'Inactivo');
INSERT INTO personaxprograma VALUES ('1037638828', '001', 4, null, 'Activo');
/****************************************************************/

---PROCEDIMIENTO ALMACENADO INGRESAR PERSONA

CREATE OR REPLACE FUNCTION "ingresar_persona"(
    doc_id character varying,
    nom character varying,
    gene character varying,
    correo character varying,
    tel character varying,
    cel character varying,
    cod_tarj character varying,
    cod_univ character varying)
RETURNS void AS
$$BEGIN
INSERT INTO persona (doc_id, nombre, genero, correo, tel, cel, cod_tarjeta, cod_universidad) VALUES (doc_id, nom, gene, correo, tel, cel, cod_tarj, cod_univ);
END;
$$
LANGUAGE plpgsql VOLATILE

/****************************************************************/

---PROCEDIMIENTO ALMACENADO ELIMINAR PERSONA----

create or replace function eliminar(doc_a_eliminar character varying)
returns void AS 
$$
BEGIN
	delete from registro_en_sa where id_persona=doc_a_eliminar;
	delete from personaxprograma where id_persona=doc_a_eliminar;
	delete from persona where doc_id=doc_a_eliminar;
	
end;
$$
LANGUAGE plpgsql VOLATILE 

/****************************************************************/

---PROCEDIMIENTO ALMACENADO REGISTRO PERSONA---

CREATE OR REPLACE FUNCTION registro_persona( 
   j_serial CHARACTER VARYING)
RETURNS void AS
$$
DECLARE 
  fechaActual date;
  fechaActualVarying CHARACTER VARYING;
  res_id CHARACTER VARYING;
  res_tipo CHARACTER VARYING;
BEGIN 
  SELECT doc_id INTO res_id FROM persona WHERE cod_tarjeta=j_serial;
  IF res_id != '' THEN
	--Con el ORDER BY colocaria las Fecha en orden DESCENDENTE (04/03/2016 - 03/03/2016), con el LIMIT 1, solo coge el primero, que sería
	--La funcion "COALESCE" valida si el primer parentesis no retorna null, asigna su respectiva consulta, si éste retorna nulo, osea 0 filas, asigna el segundo parametro, que en éste caso es ''
	--Permitiendo así la validación correcta en el IF
	SELECT COALESCE((select tipo FROM registro_en_sa WHERE id_persona=res_id ORDER BY codigo DESC LIMIT 1), '') INTO res_tipo;
	fechaActual = current_timestamp;
	--Se castea la fecha a tipo CHARACTER VARYING
	fechaActualVarying = cast(fechaActual as CHARACTER VARYING);
	--Si es "!= Entrada" es porque es '' (osea que es primera ves, por el if anterior y la funcion "COALESCE") o es 'SALIDA' osea que va a entrar
	IF res_tipo != 'ENTRADA' THEN
		INSERT INTO registro_en_sa (id_persona, fecha_hora, tipo) VALUES (res_id, fechaActualVarying, 'ENTRADA');
	--SINO es porque es 'ENTRADA' osea que va a salir
	ELSE
		INSERT INTO registro_en_sa (id_persona, fecha_hora, tipo) VALUES (res_id, fechaActualVarying, 'SALIDA');
	END IF;
  ELSE
	--No existe no se podrá registrar
  END IF;
END;
$$
  LANGUAGE plpgsql VOLATILE
/*********************************************************************************************************************************************************************/

---NOTA: Esto es lo que tenia el script anterior ( De aqui para abajo).

CREATE TYPE pPersona AS (doc_id varchar(12), nombre varchar(80), genero varchar(10), correo varchar(80), tel varchar(7), cel varchar(10),
cod_tarjeta varchar(4), cod_universidad varchar(12)); 

CREATE FUNCTION cons_por_codigo(
	doc_iden CHARACTER VARYING)
RETURNS pPersona AS

/*********************************************************************************************************************************************************************/

------------------------------------------------------------------------

PROCEDIMIENTO ALMACENADO BUSQUEDA POR PROGRAMA

busquedaSistemasProcedure

SELECT a.nombre, a.cod_tarjeta, c.nombre FROM persona AS a, personaxprograma AS b, programa AS c WHERE b.cod_programa='001'
and b.id_persona=a.doc_id and b.cod_programa=c.codigo;

busquedaElectronicaProcedure

SELECT a.nombre, a.cod_tarjeta, c.nombre FROM persona AS a, personaxprograma AS b, programa AS c WHERE b.cod_programa='002'
and b.id_persona=a.doc_id and b.cod_programa=c.codigo;

$$
DECLARE
	objPersona pPersona;
BEGIN
	SELECT doc_id, nombre, genero, correo, tel, cel, cod_tarjeta, cod_universidad INTO objPersona FROM persona WHERE doc_id = doc_iden;
	RETURN objPersona;
END;
$$
LANGUAGE plpgsql;
/****************************************************************/


